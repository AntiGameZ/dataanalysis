// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.dataanalysis.domain.jcl;

import com.ruyicai.dataanalysis.domain.jcl.SclassJcl;
import java.lang.Integer;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SclassJcl_Roo_Entity {
    
    declare @type: SclassJcl: @Entity;
    
    declare @type: SclassJcl: @Table(name = "sclassjcl");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager SclassJcl.entityManager;
    
    @Transactional("transactionManager")
    public void SclassJcl.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SclassJcl attached = SclassJcl.findSclassJcl(this.sclassId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional("transactionManager")
    public void SclassJcl.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional("transactionManager")
    public void SclassJcl.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    public static final EntityManager SclassJcl.entityManager() {
        EntityManager em = new SclassJcl().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long SclassJcl.countSclassJcls() {
        return entityManager().createQuery("SELECT COUNT(o) FROM SclassJcl o", Long.class).getSingleResult();
    }
    
    public static List<SclassJcl> SclassJcl.findAllSclassJcls() {
        return entityManager().createQuery("SELECT o FROM SclassJcl o", SclassJcl.class).getResultList();
    }
    
    public static SclassJcl SclassJcl.findSclassJcl(Integer sclassId) {
        if (sclassId == null) return null;
        return entityManager().find(SclassJcl.class, sclassId);
    }
    
    public static List<SclassJcl> SclassJcl.findSclassJclEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM SclassJcl o", SclassJcl.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
