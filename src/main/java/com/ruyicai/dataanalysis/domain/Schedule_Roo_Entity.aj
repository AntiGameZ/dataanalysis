// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.dataanalysis.domain;

import com.ruyicai.dataanalysis.domain.Schedule;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Schedule_Roo_Entity {
    
    declare @type: Schedule: @Entity;
    
    declare @type: Schedule: @Table(name = "Schedule");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager Schedule.entityManager;
    
    @Transactional("transactionManager")
    public void Schedule.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional("transactionManager")
    public void Schedule.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    public static final EntityManager Schedule.entityManager() {
        EntityManager em = new Schedule().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Schedule.countSchedules() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Schedule o", Long.class).getSingleResult();
    }
    
    public static List<Schedule> Schedule.findAllSchedules() {
        return entityManager().createQuery("SELECT o FROM Schedule o", Schedule.class).getResultList();
    }
    
    public static List<Schedule> Schedule.findScheduleEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Schedule o", Schedule.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
