// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.dataanalysis.domain.lq;

import com.ruyicai.dataanalysis.domain.lq.TeamJcl;
import java.lang.Integer;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect TeamJcl_Roo_Entity {
    
    declare @type: TeamJcl: @Entity;
    
    declare @type: TeamJcl: @Table(name = "teamjcl");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager TeamJcl.entityManager;
    
    @Transactional("transactionManager")
    public void TeamJcl.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TeamJcl attached = TeamJcl.findTeamJcl(this.teamId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional("transactionManager")
    public void TeamJcl.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional("transactionManager")
    public void TeamJcl.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    public static final EntityManager TeamJcl.entityManager() {
        EntityManager em = new TeamJcl().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long TeamJcl.countTeamJcls() {
        return entityManager().createQuery("SELECT COUNT(o) FROM TeamJcl o", Long.class).getSingleResult();
    }
    
    public static List<TeamJcl> TeamJcl.findAllTeamJcls() {
        return entityManager().createQuery("SELECT o FROM TeamJcl o", TeamJcl.class).getResultList();
    }
    
    public static TeamJcl TeamJcl.findTeamJcl(Integer teamId) {
        if (teamId == null) return null;
        return entityManager().find(TeamJcl.class, teamId);
    }
    
    public static List<TeamJcl> TeamJcl.findTeamJclEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM TeamJcl o", TeamJcl.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
