// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.dataanalysis.domain;

import com.ruyicai.dataanalysis.domain.QiuTanMatches;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect QiuTanMatches_Roo_Entity {
    
    declare @type: QiuTanMatches: @Entity;
    
    declare @type: QiuTanMatches: @Table(name = "QiuTanMatches");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager QiuTanMatches.entityManager;
    
    @Transactional("transactionManager")
    public void QiuTanMatches.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional("transactionManager")
    public void QiuTanMatches.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            QiuTanMatches attached = QiuTanMatches.findQiuTanMatches(this.matchId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional("transactionManager")
    public void QiuTanMatches.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional("transactionManager")
    public void QiuTanMatches.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional("transactionManager")
    public QiuTanMatches QiuTanMatches.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        QiuTanMatches merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager QiuTanMatches.entityManager() {
        EntityManager em = new QiuTanMatches().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long QiuTanMatches.countQiuTanMatcheses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM QiuTanMatches o", Long.class).getSingleResult();
    }
    
    public static List<QiuTanMatches> QiuTanMatches.findAllQiuTanMatcheses() {
        return entityManager().createQuery("SELECT o FROM QiuTanMatches o", QiuTanMatches.class).getResultList();
    }
    
    public static QiuTanMatches QiuTanMatches.findQiuTanMatches(int matchId) {
        return entityManager().find(QiuTanMatches.class, matchId);
    }
    
    public static List<QiuTanMatches> QiuTanMatches.findQiuTanMatchesEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM QiuTanMatches o", QiuTanMatches.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
