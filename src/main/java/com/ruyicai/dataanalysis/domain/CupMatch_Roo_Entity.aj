// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.dataanalysis.domain;

import com.ruyicai.dataanalysis.domain.CupMatch;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CupMatch_Roo_Entity {
    
    declare @type: CupMatch: @Entity;
    
    declare @type: CupMatch: @Table(name = "CupMatch");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager CupMatch.entityManager;
    
    @Transactional("transactionManager")
    public void CupMatch.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional("transactionManager")
    public void CupMatch.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            CupMatch attached = CupMatch.findCupMatch(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional("transactionManager")
    public void CupMatch.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional("transactionManager")
    public void CupMatch.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional("transactionManager")
    public CupMatch CupMatch.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CupMatch merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager CupMatch.entityManager() {
        EntityManager em = new CupMatch().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long CupMatch.countCupMatches() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CupMatch o", Long.class).getSingleResult();
    }
    
    public static List<CupMatch> CupMatch.findAllCupMatches() {
        return entityManager().createQuery("SELECT o FROM CupMatch o", CupMatch.class).getResultList();
    }
    
    public static CupMatch CupMatch.findCupMatch(int id) {
        return entityManager().find(CupMatch.class, id);
    }
    
    public static List<CupMatch> CupMatch.findCupMatchEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CupMatch o", CupMatch.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
